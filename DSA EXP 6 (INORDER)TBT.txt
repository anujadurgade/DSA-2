INORDER

#include <iostream>
#define MAX_VALUE 65536
using namespace std;

class N
{
public:
    int k;
    N*l,*r;
    bool leftTh,rightTh;
};
class ThreadedBinaryTree
{
private:
    N*root;
public:
    ThreadedBinaryTree()
    {
        root=new N();
        root->r=root->l=root;
        root->leftTh=true;
        root->k=MAX_VALUE;
    }
    void insert(int key)
    {
        N*p=root;
        for(;;)
        {
            if(p->k<key)
            {
                if(p->rightTh)
                    break;
                p=p->r;
            }
           else if(p->k>key)
            {
                if(p->leftTh)
                    break;
                p=p->l;
        }
        else
        {
            return;
        }
    }
    N*temp=new N();
    temp->k=key;
    temp->rightTh=temp->leftTh=true;
    if(p->k<key)
    {
        temp->r=p->r;
        temp->l=p;
        p->r=temp;
        p->rightTh=false;
    }
    else
    {
        temp->r=p;
        temp->l=p->l;
        p->l=temp;
        p->leftTh=false;
    }
    }
    void inorder()
    {
        N*temp=root,*p;
        for(;;)
        {
            p=temp;
            temp=temp->r;
            if(!p->rightTh)
            {
                while(!temp->leftTh)
                {
                    temp=temp->l;
                }
            }
            if(temp==root)
                break;
                cout<<temp->k<<"";
        }
        cout<<endl;
    }
};
int main()
{
    ThreadedBinaryTree tbt;
    cout<<"Threaded Binary Tree \n";
    tbt.insert(1);
    tbt.insert(2);
    tbt.insert(3);
    tbt.insert(5);
    tbt.insert(10);
    tbt.insert(7);
    tbt.insert(12);
    tbt.inorder();
    cout<<"\n";
}

OUTPUT:-

Threaded Binary Tree
1 2 3 5 7 10 12


Process returned 0 (0x0)   execution time : 0.016 s
Press any key to continue.


