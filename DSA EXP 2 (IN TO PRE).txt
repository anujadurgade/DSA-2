INFIX TO PREFIX EXPRESSION

#include <iostream>
#include <stack>
#include <algorithm>

using namespace std;

int precedence(char c)
{
    if(c == '+' || c == '-') return 1;
    if(c == '*' || c == '/') return 2;
    if(c == '^') return 3;
    return 0;
}
bool isOperator(char c)
{
    return (!isalpha(c) && !isdigit(c));
}
string infixToPrefix(string infix)
{

    reverse(infix.begin(), infix.end());

    stack<char> s;
    string prefix;

    for(int i = 0; i < infix.length(); i++)
        {
        if(isalpha(infix[i]) || isdigit(infix[i]))
        {
            prefix += infix[i];
        }
    else if(infix[i] == ')')
        {
            s.push(infix[i]);
        } else if(infix[i] == '(')
                  {
            while(!s.empty() && s.top() != ')')
            {
                prefix += s.top();
                s.pop();
            }
            s.pop();
        }
    else
        {
            while(!s.empty() && precedence(infix[i]) <= precedence(s.top()))
                {
                prefix += s.top();
                s.pop();
            }
            s.push(infix[i]);
        }
    }

    while(!s.empty())
        {
        prefix += s.top();
        s.pop();
    }

    reverse(prefix.begin(), prefix.end());

    return prefix;
}

int main()
{
    string infix = "(A-B/C)*(A/K-L)";
    cout << "Infix Expression: " << infix << endl;
    cout << "Prefix Expression: " << infixToPrefix(infix) << endl;
    return 0;
}

OUTPUT:
Infix Expression: (A-B/C)*(A/K-L)
Prefix Expression: *-A/BC-/AKL

Process returned 0 (0x0)   execution time : 0.016 s
Press any key to continue.
